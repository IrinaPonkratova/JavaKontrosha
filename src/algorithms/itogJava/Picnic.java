package algorithms.itogJava;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;

/*
–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
–í–∞—à —Ñ–∞–π–ª `input.txt` —Å–æ–¥–µ—Ä–∂–∏—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–ª–æ–≤, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö
–ø—Ä–æ–±–µ–ª–∞–º–∏. –≠—Ç–æ —Å–ª–æ–≤–∞-—Ñ—Ä—É–∫—Ç—ã, –æ–≤–æ—â–∏ –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã.
–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ —ç—Ç–æ –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–∏–∫–Ω–∏–∫! üçéü•ïü•ß
–ó–∞–¥–∞–Ω–∏—è:
1. –û—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –ø–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤:
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤
—Ñ–∞–π–ª–µ `input.txt`.
2. –ù–∞–π—Ç–∏ —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ:
–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –≤
—Ñ–∞–π–ª–µ.
3. –í—ã—á–∏—Å–ª–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É —Å–ª–æ–≤:
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –∫–∞–∂–¥–æ–µ
—Å–ª–æ–≤–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ —Ñ–∞–π–ª–µ. –ü–æ–¥—É–º–∞–π—Ç–µ –æ–± —ç—Ç–æ–º –∫–∞–∫ –æ –ø–æ–¥—Å—á–µ—Ç–µ —Ç–æ–≥–æ,
–∫–∞–∫–∏–µ —Ñ—Ä—É–∫—Ç—ã –∏ –æ–≤–æ—â–∏ —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞ –≤–∞—à–µ–º –ø–∏–∫–Ω–∏–∫–µ!
 */
public class Picnic {
    public static void main(String[] args) {
        List<String> dataList = readFileToList("input.txt");

        System.out.println("Data from file:");
        for (String data : dataList) {
            System.out.println(data);
        }
        System.out.println("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: " + countStroki((ArrayList<String>) dataList));
        System.out.println("–°–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: " + longestWord((ArrayList<String>) dataList));
        wordFrequency((ArrayList<String>) dataList);

    }

    public static List<String> readFileToList(String fileName) {
        List<String> list = new ArrayList<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(fileName))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] words = line.split(" ");
                list.addAll(Arrays.asList(words));
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        return list;
    }


    public static int countStroki(ArrayList<String> lol) {
        return lol.size();
    }

    public static LinkedHashSet<String> longestWord(ArrayList<String> lol) {
        LinkedHashSet<String> arr = new LinkedHashSet<>();
        int longesLength = 0;

        for (String word : lol) {
            int wordLength = word.length();
            if (wordLength > longesLength) {
                arr.clear();
                arr.add(word);
                longesLength = wordLength;
            } else if (wordLength == longesLength) {
                arr.add(word);

            }
        }

        return arr;
    }

    public static void wordFrequency(ArrayList<String> lol) {
        Map<String, Integer> map = new HashMap<>();
        for (String item : lol) {
            if (map.containsKey(item)) {
                map.put(item, map.get(item) + 1);
            } else {
                map.put(item, 1);
            }
        }

        for (Map.Entry<String, Integer> item : map.entrySet()) {
            System.out.println("–ü—Ä–æ–¥—É–∫—Ç: " + item.getKey() + ", –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —Å–ø–∏—Å–∫–µ: " + item.getValue());
        }

    }
}

